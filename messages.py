import random
from os import getenv

from aiogram import F, Router
from aiogram.exceptions import TelegramForbiddenError
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.chat_action import ChatActionMiddleware
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.text_decorations import HtmlDecoration

from callback_models import ConfirmCallback, KillCallback
from utils import conn_db

router = Router()
router.message.middleware(ChatActionMiddleware())

html = HtmlDecoration()


@router.message(Command("start"))
async def start(message: Message):
    if message.chat.type != "private":
        await message.answer("‚ö†Ô∏è –ü–∏—à–∏ –º–Ω–µ –≤ <b>–ª–∏—á–Ω—ã–µ</b> —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    with conn_db() as conn:
        conn.execute(
            "INSERT OR IGNORE INTO users (id) VALUES (?)",
            (message.from_user.id,)
        )
        conn.commit()

    await message.answer(
        "<i>–ë–æ—Ç \"–∫–∏–ª–ª–µ—Ä\"</i>\n"
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –§–ò–û"
    )


@router.message(Command("admin"))
async def admin(message: Message):
    if str(message.from_user.id) != getenv("ADMIN"):
        return
    
    args = message.text.split()
    if len(args) != 3 or args[1] not in {"add", "remove"}:
        await message.answer(
            "–ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–º–∞–Ω–¥—ã:\n"
            f"{html.quote('<add|remove>')} <user_id>"
        )
        return
    _, operation, target_id = args

    with conn_db() as conn:
        cur = conn.cursor()
        target_user = cur.execute(
            "SELECT is_admin FROM users WHERE id = ?",
            (target_id,)
        ).fetchone()
    
        if target_user is None:
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>ID –Ω–µ –Ω–∞–π–¥–µ–Ω</b> –≤ –±–∞–∑–µ"
            )
            return
        is_target_user_admin, = target_user

        if operation == "add" and not is_target_user_admin:
            conn.execute(
                "UPDATE users SET is_admin = true WHERE id = ?",
                (target_id,)
            )
        elif operation == "remove" and is_target_user_admin:
            conn.execute(
                "UPDATE users SET is_admin = false WHERE id = ?",
                (target_id,)
            )
        else:
            await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
            return

        conn.commit()
    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω")


@router.message(Command("disclaimer"))
async def disclaimer(message: Message):
    await message.answer(
        "<b>–î–∏—Å–∫–ª–µ–π–º–µ—Ä</b>\n\n"
        "–ë–æ—Ç –Ω–∏–∫–∞–∫ –Ω–µ —Å–≤—è–∑–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º –º–∏—Ä–æ–º.\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ –±—ã–ª–æ –≤—ã–¥–≤–∏–Ω—É—Ç–æ –∑–∞–∫–∞–∑—á–∏–∫–æ–º.\n"
        "–ê–≤—Ç–æ—Ä –∫–æ–¥–∞ –±–æ—Ç–∞ –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    )


@router.message(Command("cancel"))
async def cancel(message: Message):
    with conn_db() as conn:
        conn.execute(
            "INSERT OR IGNORE INTO users (id) VALUES (?)",
            (message.from_user.id,)
        )

        cur = conn.cursor()
        target, = cur.execute("SELECT target FROM users WHERE id = ?",
                              (message.from_user.id,)).fetchone()
        if target is not None:
            rpl = InlineKeyboardBuilder()
            rpl.button(text="‚ùå –í—ã–π—Ç–∏", callback_data=ConfirmCallback().pack())
            rpl.adjust(1)

            await message.answer(
                "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç, –≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ</b>?",
                reply_markup=rpl.as_markup()
            )
            return
        conn.execute(
            "UPDATE users SET name = null WHERE id = ?",
            (message.from_user.id,)
        )
        conn.commit()

    await message.answer(
        "üò¢ –¢—ã –±–æ–ª—å—à–µ <b>–Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å</b> –≤ –∏–≥—Ä–µ"
    )


@router.message(Command("menu", "stats", "status"))
async def killer_menu(message: Message):
    with conn_db() as conn:
        conn.execute(
            "INSERT OR IGNORE INTO users (id) VALUES (?)",
            (message.from_user.id,)
        )
        conn.commit()

        cur = conn.cursor()
        killer_name, target_name = cur.execute(
            "SELECT killers.name, targets.name FROM users as killers "
            "LEFT JOIN users as targets "
            "ON killers.target = targets.id "
            "WHERE killers.id = ?",
            (message.from_user.id,)
        ).fetchone()

        players_count = cur.execute(
            "SELECT COUNT(*) FROM users WHERE name is not null"
        ).fetchone()[0]

    rpl = InlineKeyboardBuilder()
    if killer_name is None:
        text = "–¢—ã <b>–Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å</b>\n–ù–∞–ø–∏—à–∏ –§–ò–û –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ"
    else:
        text = (
            f"–¢—ã <b>—É—á–∞—Å—Ç–≤—É–µ—à—å</b>. –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: <i>{players_count}</i>\n"
            f"üë§ <b>–¢–≤–æ—ë –∏–º—è</b>: {killer_name}\n"
            "üéØ <b>–¶–µ–ª—å</b>: " +
            (f"<tg-spoiler>{target_name}</tg-spoiler>"
             if target_name is not None else
             "–ù–µ –≤—ã–±—Ä–∞–Ω–∞")
        )
        if target_name is not None:
            rpl.button(text="üî™ –¶–µ–ª—å —É–±–∏—Ç–∞", callback_data=KillCallback().pack())
    rpl.adjust(1)

    await message.answer(
        text,
        reply_markup=rpl.as_markup()
    )


@router.message(Command("clear_lb"))
async def clear_leaderboard(message: Message):
    with conn_db() as conn:
        cur = conn.cursor()
        if cur.execute("SELECT 1 FROM users WHERE is_admin = true AND id = ?",
                       (message.from_user.id,)).fetchone() is None:
            await message.answer(
                "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"
            )
            return

    rpl = InlineKeyboardBuilder()
    rpl.button(text="üî¥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data="clear_lb")
    rpl.adjust(1)

    await message.answer(
        "‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—á–∏—Å—Ç–∏—Ç—å –∏–≥—Ä—É?",
        reply_markup=rpl.as_markup()
    )


@router.message(Command("distribute"))
async def distribute(message: Message):
    with conn_db() as conn:
        cur = conn.cursor()
        if cur.execute("SELECT 1 FROM users WHERE is_admin = true AND id = ?",
                       (message.from_user.id,)).fetchone() is None:
            await message.answer(
                "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"
            )
            return

        users = {
            tgid: name
            for tgid, name in cur.execute(
                "SELECT id, name FROM users WHERE name is not null AND target is null"
            ).fetchall()
        }

    if len(users) <= 1:
        await message.answer(
            "üò¢ –°–ª–∏—à–∫–æ–º <b>–º–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤</b>"
        )
        return

    for_disribution = list(users.keys())
    random.shuffle(for_disribution)
    targets = {}
    for i in range(len(for_disribution)):
        targets[for_disribution[i]] = for_disribution[i+1 if i+1 < len(for_disribution) else 0]

    with conn_db() as conn:
        conn.executemany(
            "UPDATE users SET target = ? WHERE id = ?",
            map(lambda v: tuple(reversed(v)), targets.items())
        )
        conn.commit()

    for killer, target in targets.items():
        try:
            await message.bot.send_message(
                killer,
                "üéØ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ <b>—Ü–µ–ª—å</b>:\n"
                f"<i>{users[target]}</i>"
            )
        except TelegramForbiddenError:
            pass

    await message.answer("‚úÖ –¶–µ–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")


@router.message(Command("leaderboard"))
async def leaderboard(message: Message):
    text = "üóíÔ∏è –¢–∞–±–ª–∏—Ü–∞ <b>–ª–∏–¥–µ—Ä–æ–≤</b>:\n<i>–°—Ç–∞—Ç—É—Å –ò–º—è: –ö–∏–ª–ª–æ–≤</i>\n\n"
    lb = ""
    with conn_db() as conn:
        cur = conn.cursor()
        for name, kills, target_id in cur.execute(
            "SELECT name, kills, target FROM users WHERE name is not null ORDER BY kills DESC"
        ).fetchall():
            lb += ('üü¢' if target_id is not None else 'üî¥')+ f"{name}: {kills}\n"
    text += lb or "<b>–ü—É—Å—Ç–æ</b>"
    await message.answer(text)


@router.message(F.text)
async def text_message(message: Message):
    with conn_db() as conn:
        conn.execute(
            "INSERT OR IGNORE INTO users (id) VALUES (?)",
            (message.from_user.id,)
        )
        conn.execute(
            "UPDATE users SET name = ? WHERE id = ?",
            (message.text, message.from_user.id)
        )
        conn.commit()

    await message.answer(
        "üéâ –¢–µ–ø–µ—Ä—å —Ç—ã <b>—É—á–∞—Å—Ç–≤—É–µ—à—å</b> –≤ –∏–≥—Ä–µ\n"
        "‚úèÔ∏è –¢–≤–æ–∏–º –∏–º–µ–Ω–µ–º –≤—ã–±—Ä–∞–Ω–æ:\n"
        f"{message.text}\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã —É—á–∞—Å—Ç–∏—è –æ—Ç–ø—Ä–∞–≤—å <code>/cancel</code>"
    )
